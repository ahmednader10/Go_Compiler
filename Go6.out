PACKAGE : package
IDENTIFIER : main
IMPORT : import
STRING_LIT : "fmt"
FUNC : func
IDENTIFIER : main
OPEN_PARAN : (
CLOSE_PARAN : )
OPEN_CURLY : {
IDENTIFIER : s
COLON_EQUAL : :=
IDENTIFIER : make
OPEN_PARAN : (
OPEN_SQUARE : [
CLOSE_SQUARE : ]
IDENTIFIER : string
COMMA : ,
INT_LIT : 3
CLOSE_PARAN : )
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
STRING_LIT : "emp:"
COMMA : ,
IDENTIFIER : s
CLOSE_PARAN : )
IDENTIFIER : s
OPEN_SQUARE : [
INT_LIT : 0
CLOSE_SQUARE : ]
EQUAL : =
STRING_LIT : "a"
IDENTIFIER : s
OPEN_SQUARE : [
INT_LIT : 1
CLOSE_SQUARE : ]
EQUAL : =
STRING_LIT : "b"
IDENTIFIER : s
OPEN_SQUARE : [
INT_LIT : 2
CLOSE_SQUARE : ]
EQUAL : =
STRING_LIT : "c"
IDENTIFIER : s
DOT : .
IDENTIFIER : append
OPEN_PARAN : (
IDENTIFIER : s
COMMA : ,
STRING_LIT : "e"
COMMA : ,
STRING_LIT : "f"
CLOSE_PARAN : )
IDENTIFIER : l
COLON_EQUAL : :=
IDENTIFIER : s
OPEN_SQUARE : [
INT_LIT : 2
COLON : :
INT_LIT : 5
CLOSE_SQUARE : ]
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
STRING_LIT : "sl1:"
COMMA : ,
IDENTIFIER : l
CLOSE_PARAN : )
IDENTIFIER : l
EQUAL : =
IDENTIFIER : s
OPEN_SQUARE : [
COLON : :
INT_LIT : 5
CLOSE_SQUARE : ]
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
STRING_LIT : "sl2:"
COMMA : ,
IDENTIFIER : l
CLOSE_PARAN : )
IDENTIFIER : l
EQUAL : =
IDENTIFIER : s
OPEN_SQUARE : [
INT_LIT : 2
COLON : :
CLOSE_SQUARE : ]
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
STRING_LIT : "sl3:"
COMMA : ,
IDENTIFIER : l
CLOSE_PARAN : )
IDENTIFIER : t
COLON_EQUAL : :=
OPEN_SQUARE : [
CLOSE_SQUARE : ]
IDENTIFIER : string
OPEN_CURLY : {
STRING_LIT : "g"
COMMA : ,
STRING_LIT : "h"
COMMA : ,
STRING_LIT : "i"
CLOSE_CURLY : }
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
STRING_LIT : "dcl:"
COMMA : ,
IDENTIFIER : t
CLOSE_PARAN : )
IDENTIFIER : twoD
COLON_EQUAL : :=
IDENTIFIER : make
OPEN_PARAN : (
OPEN_SQUARE : [
CLOSE_SQUARE : ]
OPEN_SQUARE : [
CLOSE_SQUARE : ]
IDENTIFIER : int
COMMA : ,
INT_LIT : 3
CLOSE_PARAN : )
FOR : for
IDENTIFIER : i
COLON_EQUAL : :=
INT_LIT : 0
SEMI_COLON : ;
IDENTIFIER : i
REL_OP : <=
INT_LIT : 2
SEMI_COLON : ;
IDENTIFIER : i
INCREMENT : ++
OPEN_CURLY : {
IDENTIFIER : innerLen
COLON_EQUAL : :=
IDENTIFIER : i
PLUS :+
INT_LIT : 1
IDENTIFIER : twoD
OPEN_SQUARE : [
IDENTIFIER : i
CLOSE_SQUARE : ]
EQUAL : =
IDENTIFIER : make
OPEN_PARAN : (
OPEN_SQUARE : [
CLOSE_SQUARE : ]
IDENTIFIER : int
COMMA : ,
IDENTIFIER : innerLen
CLOSE_PARAN : )
FOR : for
IDENTIFIER : j
COLON_EQUAL : :=
INT_LIT : 0
SEMI_COLON : ;
IDENTIFIER : j
REL_OP : <
IDENTIFIER : innerLen
SEMI_COLON : ;
IDENTIFIER : j
INCREMENT : ++
OPEN_CURLY : {
IDENTIFIER : twoD
OPEN_SQUARE : [
IDENTIFIER : i
CLOSE_SQUARE : ]
OPEN_SQUARE : [
IDENTIFIER : j
CLOSE_SQUARE : ]
EQUAL : =
IDENTIFIER : i
PLUS :+
IDENTIFIER : j
CLOSE_CURLY : }
CLOSE_CURLY : }
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
STRING_LIT : "2d: "
COMMA : ,
IDENTIFIER : twoD
CLOSE_PARAN : )
CLOSE_CURLY : }
EOF: Done
