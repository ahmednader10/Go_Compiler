PACKAGE : package
IDENTIFIER : main
IMPORT : import
OPEN_PARAN : (
STRING_LIT : "fmt"
STRING_LIT : "math"
CLOSE_PARAN : )
FUNC : func
IDENTIFIER : pow
OPEN_PARAN : (
IDENTIFIER : x
COMMA : ,
IDENTIFIER : n
COMMA : ,
IDENTIFIER : lim
IDENTIFIER : float64
CLOSE_PARAN : )
IDENTIFIER : float64
OPEN_CURLY : {
IF : if
IDENTIFIER : v
COLON_EQUAL : :=
IDENTIFIER : math
DOT : .
IDENTIFIER : Pow
OPEN_PARAN : (
IDENTIFIER : x
COMMA : ,
IDENTIFIER : n
CLOSE_PARAN : )
SEMI_COLON : ;
IDENTIFIER : v
REL_OP : <
IDENTIFIER : lim
OPEN_CURLY : {
RETURN : return
IDENTIFIER : v
CLOSE_CURLY : }
ELSE : else
OPEN_CURLY : {
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Printf
OPEN_PARAN : (
STRING_LIT : "%g >= %g\n"
COMMA : ,
IDENTIFIER : v
COMMA : ,
IDENTIFIER : lim
CLOSE_PARAN : )
CLOSE_CURLY : }
RETURN : return
IDENTIFIER : lim
CLOSE_CURLY : }
FUNC : func
IDENTIFIER : main
OPEN_PARAN : (
CLOSE_PARAN : )
OPEN_CURLY : {
IDENTIFIER : fmt
DOT : .
IDENTIFIER : Println
OPEN_PARAN : (
IDENTIFIER : pow
OPEN_PARAN : (
INT_LIT : 3
COMMA : ,
INT_LIT : 2
COMMA : ,
INT_LIT : 10
CLOSE_PARAN : )
COMMA : ,
IDENTIFIER : pow
OPEN_PARAN : (
INT_LIT : 3
COMMA : ,
INT_LIT : 3
COMMA : ,
INT_LIT : 20
CLOSE_PARAN : )
COMMA : ,
CLOSE_PARAN : )
CLOSE_CURLY : }
EOF: Done
